import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:green_recipe/features/authentication/controllers/language_change_controller.dart';
import 'package:green_recipe/firebase_options.dart';
import 'package:green_recipe/views/screens/splashScreen/splash_screen.dart';
import 'package:provider/provider.dart';
import "package:flutter_gen/gen_l10n/app_localizations.dart";

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  runApp(
    const MyApp(),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
        providers: [
          ChangeNotifierProvider(create: (_) => LanguageChangeController())
        ],
        child: Consumer <LanguageChangeController>(builder: (context, provider, child) {
          return MaterialApp(
            debugShowCheckedModeBanner: false,
            locale: provider.appLocale,
            localizationsDelegates: [
              AppLocalizations.delegate,
              GlobalMaterialLocalizations.delegate,
              GlobalWidgetsLocalizations.delegate,
              GlobalCupertinoLocalizations.delegate,
            ],
            supportedLocales: [
              const Locale('en'), // English US
              const Locale('es'), // Spanish
            ],

            // theme: Provider.of<ThemeProvider>(context).themeData,
            home: Splash(),
          );
        }));
  }
}


////////////////////////////
Consumer<LanguageChangeController>(
            builder: (context, provider, child) {
              return PopupMenuButton<Language>(
            onSelected: (Language item){
              if (Language.english.name == item.name) {
                provider.changeLanguage(Locale("en"));
              }else{
                provider.changeLanguage(Locale("es"));
              }
            },
            itemBuilder: (BuildContext context) => <PopupMenuEntry<Language>>[
              PopupMenuItem<Language>(
                value: Language.english,
                child: Text("English"),
              ),
              PopupMenuItem<Language>(
                value: Language.spanish,
                child: Text("Spanish"),
              ),
            ],
          );
            }
          )
